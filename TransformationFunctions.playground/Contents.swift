import UIKit

// Функции высшего порядка

// MARK: - Transformation Functions

// Ознакомление

// Функция map позволяет применить заданное преобразование к каждому элементу в массиве или другой коллекции и возвращает новый массив с результатами.

// Напишите функцию, которая принимает массив целых чисел и возвращает новый массив, содержащий квадрат каждого числа из исходного массива. Используйте функцию map для решения этой задачи.

let numbers = [1, 2, 3, 4, 5]

let squaredNumbers = numbers.map { $0 * $0 }

print(squaredNumbers)

// Функция compactMap позволяет преобразовывать элементы и одновременно удалять значения nil. Она особенно полезна при работе с опциональными значениями, так как автоматически фильтрует их, возвращая только ненулевые элементы.

// Напишите функцию, которая принимает массив строк и возвращает новый массив целых чисел. Входной массив может содержать как числовые строки, так и строки, которые не могут быть преобразованы в числа. Используйте функцию compactMap, чтобы преобразовать валидные строки в целые числа и игнорировать те, которые не могут быть преобразованы.

let stringArray = ["1", "2", "three", "4", "5a", "6"]

func convertToIntegers(_ stringArray: [String]) -> [Int] {
    let integerArray = stringArray.compactMap { Int($0) }
    return integerArray
}

let result1 = convertToIntegers(stringArray)

print(result1)

// Функция flatMap позволяет преобразовывать и "сплющивать" вложенные структуры данных. Она применяется к массивам и другим коллекциям, позволяя создавать одномерные массивы из многомерных или обрабатывать опциональные значения.

// Есть массив массивов, и вы хотите создать одномерный массив

let nestedArray = [[1, 2, 3], [4, 5], [6]]
let flattenedArray = nestedArray.flatMap { $0 }
print(flattenedArray)

// Если у вас есть опциональное значение и вы хотите преобразовать его

let optionalString: String? = "123"
let result2 = optionalString.flatMap { Int($0) }
print(result2 as Any)

let nilString: String? = nil
let nilResult = nilString.flatMap { Int($0) }
print(nilResult as Any)

// Функция mapValues позволяет преобразовать значения в словаре, применяя заданную операцию к каждому значению, при этом ключи остаются неизменными. Это полезно, когда вам нужно изменить только значения в словаре, не трогая его структуру.

var multiply = ["first": 1, "second": 2, "third": 3]
// Умножаем каждое значение на 2
var result = multiply.mapValues({ $0 * 2 })
print(result)


